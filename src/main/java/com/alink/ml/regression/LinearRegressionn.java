package com.alink.ml.regression;import com.alibaba.alink.pipeline.PipelineStageBase;import com.alibaba.alink.pipeline.regression.LinearRegression;import com.alink.ml.utils.BaseModule;import com.alink.ml.utils.Utils;import java.util.HashMap;/** * Created by edc on 2020/8/14 */public class LinearRegressionn implements BaseModule {    @Override    public PipelineStageBase getModule(HashMap<String, String> map, String schemaStr) {        HashMap<String, String[]> feaLab = Utils.StringToFeatureLabel(schemaStr);        String[] fea = feaLab.get("fea");        String label = feaLab.get("label")[0];        return new LinearRegression()                .setPredictionCol(map.getOrDefault("predictioncol", "predictionCol"))                .setLabelCol(label)                .setFeatureCols(fea)                .setReservedCols(Utils.strArrayOrNull(map, "reservedcols"))                .setWeightCol(map.getOrDefault("weightCol", null))                .setOptimMethod(map.getOrDefault("optimmethod", null))                .setVectorCol(map.getOrDefault("vectorCol", null))                .setL1(Utils.douOrDefault(map, "l1", "0.0"))                .setL2(Utils.douOrDefault(map, "l2", "0.0"))                .setWithIntercept(Utils.boolOrTrue(map, "withintercept"))                .setMaxIter(Utils.intOrDefault(map, "maxiter", "100"))                .setEpsilon(Utils.douOrDefault(map, "epsilon", "1.0E-6"))                .setWeightCol(map.getOrDefault("vectorcol", null))                .setStandardization(Utils.boolOrTrue(map, "standardization"))                ;    }}